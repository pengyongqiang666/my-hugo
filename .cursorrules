#  Hugo博客项目 Cursor 规则

## 项目概述
这是一个基于Hugo和Blowfish主题的个人技术博客项目。

## 自动化规则

### 编译检查规则
每次修改Hugo相关文件后，自动执行以下检查：

1. **Hugo构建检查**: 运行 `hugo --gc --minify` 检查构建错误
2. **语法验证**: 检查TOML、YAML、Markdown文件语法
3. **链接验证**: 验证内部链接的有效性

### 文件修改监听
监听以下文件变化并触发检查：
- `config/**/*.toml`
- `content/**/*.md`
- `layouts/**/*.html`
- `static/**/*`
- `archetypes/**/*.md`

### 错误处理
如果发现错误：
1. 立即停止当前操作
2. 显示详细错误信息
3. 提供修复建议
4. 等待用户确认后继续

## 开发约定

### 文件结构
- `content/posts/` - 技术文章
- `content/projects.md` - 项目展示页面
- `content/about.md` - 关于页面
- `content/contact.md` - 联系页面
- `config/_default/` - 主要配置文件
- `archetypes/` - 内容模板
- `static/` - 静态资源

### 内容创建
使用以下命令创建新内容：
```bash
# 创建新文章
hugo new posts/文章标题.md

# 创建新页面
hugo new 页面名称.md
```

### 构建和部署
```bash
# 本地开发服务器
hugo server -D

# 生产构建
hugo --gc --minify

# 清理缓存
hugo mod clean
```

### 常见问题解决

#### 1. 模块版本兼容性
如果出现模块版本警告：
```bash
hugo mod graph
hugo mod get -u
```

#### 2. 模板渲染错误
检查：
- 文件路径是否正确
- 图片资源是否存在
- 模板语法是否正确

#### 3. 配置文件错误
验证：
- TOML语法正确性
- 配置项的有效性
- 路径引用的准确性

## 质量控制

### 内容质量
- 文章必须包含标题、摘要、标签
- 代码示例需要语言标识
- 图片需要alt属性描述

### 技术要求
- 保持响应式设计
- 优化SEO设置
- 确保可访问性
- 支持多种设备

### 性能优化
- 图片压缩和优化
- CSS/JS文件压缩
- 启用缓存策略
- 减少HTTP请求

## 自动化脚本

### 可用的NPM脚本命令：
```bash
# 开发服务器
npm run dev

# 构建检查
npm run check

# 构建检查 + 启动开发服务器
npm run check-dev

# 生产构建
npm run build

# 创建新文章
npm run new-post 文章标题

# 清理构建文件
npm run clean

# 部署准备
npm run deploy
```

### 自动检查规则
当修改任何Hugo相关文件时，建议运行：
```bash
npm run check
```

这会执行完整的构建检查，包括：
- Hugo版本检查
- 配置文件语法验证
- 内容文件检查
- 构建测试
- 生成文件验证
- 性能建议