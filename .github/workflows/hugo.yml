# Hugo 博客自动部署到 GitHub Pages
# 工作流名称
name: Deploy Hugo site to Pages

on:
  # 当推送到主分支时触发
  push:
    branches:
      - main
      - master
  # 允许手动触发
  workflow_dispatch:

# 设置 GITHUB_TOKEN 的权限，允许部署到 Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 只允许一个并发部署，跳过正在进行中的运行和最新排队的运行之间的运行
# 但是，不要取消正在进行的运行，因为我们希望让这些生产部署完成
concurrency:
  group: "pages"
  cancel-in-progress: false

# 默认使用 bash
defaults:
  run:
    shell: bash

jobs:
  # 构建任务
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.148.2
    steps:
      - name: 安装 Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb          
      
      - name: 安装 Dart Sass
        run: sudo snap install dart-sass
      
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      
      - name: 设置 Pages
        id: pages
        uses: actions/configure-pages@v4
      
      - name: 安装 Node.js 依赖
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
      
      - name: 构建 Hugo 站点
        env:
          # 为了获得最大性能，使用相对 URL 的生产环境
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo \
            --gc \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"          
      
      - name: 上传构建结果
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # 部署任务
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 部署到 GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4